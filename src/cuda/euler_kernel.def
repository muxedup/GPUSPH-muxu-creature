/*  Copyright 2011-2013 Alexis Herault, Giuseppe Bilotta, Robert A. Dalrymple, Eugenio Rustico, Ciro Del Negro

    Istituto Nazionale di Geofisica e Vulcanologia
        Sezione di Catania, Catania, Italy

    Universit√† di Catania, Catania, Italy

    Johns Hopkins University, Baltimore, MD

    This file is part of GPUSPH.

    GPUSPH is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    GPUSPH is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with GPUSPH.  If not, see <http://www.gnu.org/licenses/>.
*/


struct common_euler_particle_data
{
	const	uint	index;
	const	particleinfo	info;
	const	ParticleType	ptype;
	const	float4	force;
	const	int3	gridPos;
	float4	pos;
	float4	vel;
	float4	velc;

	__device__ __forceinline__
	common_euler_particle_data(const uint _index, common_euler_params params) :
		index(_index),
		info(params.info[index]),
		ptype(static_cast<ParticleType>(PART_TYPE(info))),
		force(params.forces[index]),
		gridPos(calcGridPosFromParticleHash(params.particleHash[index])),
		pos(params.oldPos[index]),
		vel(params.oldVel[index])
	{}
};

struct sa_boundary_particle_data
{
	float4	eulerVel;

	__device__ __forceinline__
	sa_boundary_particle_data(const uint index, sa_boundary_euler_params params) :
		eulerVel(params.oldEulerVel[index])
	{}
};

struct xsph_particle_data
{
	float4	xsph;

	__device__ __forceinline__
	xsph_particle_data(const uint index, xsph_euler_params params) :
		xsph(params.xsph[index])
	{}
};

struct kepsvisc_particle_data
{
	float	keps_k;
	float	keps_e;

	__device__ __forceinline__
	kepsvisc_particle_data(const uint index, kepsvisc_euler_params params) :
		keps_k(params.oldTKE[index]),
		keps_e(params.oldEps[index])
	{}
};

struct grenier_particle_data
{
	float4	vol;

	__device__ __forceinline__
	grenier_particle_data(const uint index, grenier_euler_params params) :
		vol(params.oldVol[index])
	{}
};

/// The actual euler_params struct, which concatenates all of the above, as appropriate.
template<KernelType _kerneltype,
	SPHFormulation _sph_formulation,
	BoundaryType _boundarytype,
	ViscosityType _visctype,
	flag_t _simflags>
struct euler_particle_data :
	common_euler_particle_data,
	COND_STRUCT(_boundarytype == SA_BOUNDARY && (_visctype == KEPSVISC || _simflags && ENABLE_INLET_OUTLET),
				sa_boundary_particle_data),
	COND_STRUCT(_visctype == KEPSVISC, kepsvisc_particle_data),
	COND_STRUCT(_simflags & ENABLE_XSPH, xsph_particle_data),
	COND_STRUCT(_sph_formulation == SPH_GRENIER, grenier_particle_data)
{
	static const KernelType kerneltype = _kerneltype;
	static const SPHFormulation sph_formulation = _sph_formulation;
	static const BoundaryType boundarytype = _boundarytype;
	static const ViscosityType visctype = _visctype;
	static const flag_t simflags = _simflags;

	// shorthand for the type of the euler params
	typedef euler_params<kerneltype, sph_formulation, boundarytype, visctype, simflags> params_t;

	// determine specialization automatically based on info and params
	__device__ __forceinline__
	euler_particle_data(const uint _index, params_t const& params) :
		common_euler_particle_data(_index, params),
		COND_STRUCT(boundarytype == SA_BOUNDARY && (_visctype == KEPSVISC || _simflags && ENABLE_INLET_OUTLET),
					sa_boundary_particle_data)(_index, params),
		COND_STRUCT(visctype == KEPSVISC, kepsvisc_particle_data)(_index, params),
		COND_STRUCT(simflags & ENABLE_XSPH, xsph_particle_data)(_index, params),
		COND_STRUCT(sph_formulation == SPH_GRENIER, grenier_particle_data)(_index, params)
	{}
};



// A functor that helps to compute the velocity of particles when xsph is enabled
template<bool xsphEnabled>
struct compute_corrected_velocity {
	template<typename EP, typename P>
	__device__ __forceinline__
	static void
	with(EP const& params, P &pdata)
	{
		 pdata.velc = pdata.vel + (params.step - 1)*pdata.force*params.half_dt;
	}
};

template<>
template<typename EP, typename P>
__device__ __forceinline__ void
compute_corrected_velocity<true>::with(EP const& params, P &pdata)
{
	pdata.velc = pdata.vel + (params.step - 1)*pdata.force*params.half_dt;
	pdata.velc.x += d_epsxsph*pdata.xpsh.x;
	pdata.velc.y += d_epsxsph*pdata.xpsh.y;
	pdata.velc.z += d_epsxsph*pdata.xpsh.z;
}

// A functor that helps to integrate density, SA or volume
enum continuity_integration_type {
	INTEGRATE_VOLUME,
	INTEGRATE_SA,
	INTEGRATE_DENSITY
};

template<enum continuity_integration_type>
struct continuity_integration {
	template<typename EP, typename P>
	__device__ __forceinline__
	static void
	with(EP const& params, P &pdata, int index, float dt)
	{
		pdata.vel.w += dt*pdata.force.w;
	}
};

//specialization for GRENIER formulation
template<>
template<typename EP, typename P>
__device__ __forceinline__ void
continuity_integration<INTEGRATE_VOLUME>::with(EP const& params, P &pdata, int index, float dt)
{
	pdata.vol.y += dt*pdata.force.w;
}

//specialization for SA Boundary
template<>
template<typename EP, typename P>
__device__ __forceinline__ void
continuity_integration<INTEGRATE_SA>::with(EP const& params, P &pdata, int index, float dt)
{
	sa_integrate_continuity_equation<EP::simflags & ENABLE_DENSITY_SUM>::template with<EP::kerneltype>(
			params.newVel[index].w,
			pdata.vel.w,
			index,
			pdata.pos,
			pdata.velc,
			params.oldgGam[index],
			params.newgGam[index],
			params.oldPos,
			params.oldVelRW,
			params.oldEulerVel,
			params.forces,
			params.info,
			params.newBoundElement,
			params.vertPos0,
			params.vertPos1,
			params.vertPos2,
			params.particleHash,
			params.cellStart,
			params.neibsList,
			params.numParticles,
			params.contupd[index],
			pdata.force.w,
			dt,
			params.full_dt,
			params.half_dt,
			params.slength,
			params.influenceradius,
			params.step);
}

// A functor that helps to integrate when k-e model is enabled
template<bool k_e_Enabled>
struct k_e_integration {
	template<typename EP, typename P>
	__device__ __forceinline__
	static void
	with(EP const& params, P &pdata, int index, float dt)
	{ /* do nothing*/ }
};


template<>
template<typename EP, typename P>
__device__ __forceinline__ void
k_e_integration<true>::with(EP const& params, P &pdata, int index, float dt)
{
	const float3 dkde = params.keps_dkde[index];
	const float oldK = pdata.keps_k;
	// implicit formulations of k and e
	pdata.keps_k = (oldK + dt*dkde.x)/(1.0f + dt*pdata.keps_e/oldK);
	pdata.keps_e = (pdata.keps_e + dt*dkde.y)/(1.0f + dt*pdata.keps_e/oldK*dkde.z);
}

// A functor that helps to update normal of boundary element, if using SA_BOUNDARY
template<BoundaryType boundarytype>
struct update_normals_SA {
	template<typename EP, typename P>
	__device__ __forceinline__
	static void
	with(EP const& params, P &pdata, int index)
	{ /* do nothing*/ }
};


template<>
template<typename EP, typename P>
__device__ __forceinline__ void
update_normals_SA<SA_BOUNDARY>::with(EP const& params, P &pdata, int index)
{
	if (BOUNDARY(pdata.info) || VERTEX(pdata.info)) {
		const float3 normal = as_float3(params.newBoundElement[index]);
		applyrot(&d_rbsteprot[9*object(pdata.info)], normal, params.newBoundElement[index]);
	}
}

// A functor that helps to integrate Eulerian velocity for k-eps, if using SA_BOUNDARY
template<BoundaryType boundarytype, ViscosityType visctype>
struct integrate_eulerian_velocity_ke {
	template<typename EP, typename P>
	__device__ __forceinline__
	static void
	with(EP const& params, P &pdata, float dt)
	{ /* do nothing*/ }
};


template<>
template<typename EP, typename P>
__device__ __forceinline__ void
integrate_eulerian_velocity_ke<SA_BOUNDARY, KEPSVISC>::with(EP const& params, P &pdata, float dt)
{
	if (!IO_BOUNDARY(pdata.info) || (VERTEX(pdata.info) && CORNER(pdata.info))) {
		// this is for k-eps only. Normally forces are going to be zero
		pdata.eulerVel += dt*pdata.force;
	}
}

template<BoundaryType boundarytype>
struct write_gamma_of_boundary {
	template<typename EP, typename P>
	__device__ __forceinline__
	static void
	with(EP const& params, P &pdata)
	{ /* do nothing*/ }
};


template<>
template<typename EP, typename P>
__device__ __forceinline__ void
write_gamma_of_boundary<SA_BOUNDARY>::with(EP const& params, P &pdata)
{
	if (BOUNDARY(pdata.info))
		params.newgGam[pdata.index] = params.oldgGam[pdata.index];
}

// A functor that helps to writes volume output, if using GRENIER formulation
template<SPHFormulation sph_formulation>
struct write_volume{
	template<typename EP, typename P>
	__device__ __forceinline__
	static void
	with(EP const& params, P &pdata, int index)
	{ /* do nothing*/ }
};


template<>
template<typename EP, typename P>
__device__ __forceinline__ void
write_volume<SPH_GRENIER>::with(EP const& params, P &pdata, int index)
{
	pdata.vol.w = expf(pdata.vol.y)*pdata.vol.x;
	params.newVol[index] = pdata.vol;
}


// A functor that helps to writes velocity output, if using SA_BOUNDARY
template<BoundaryType boundarytype, ViscosityType visctype>
struct write_velocity{
	template<typename EP, typename P>
	__device__ __forceinline__
	static void
	with(EP const& params, P &pdata, int index)
	{ /* do nothing*/ }
};


template<>
template<typename EP, typename P>
__device__ __forceinline__ void
write_velocity<SA_BOUNDARY, KEPSVISC>::with(EP const& params, P &pdata, int index)
{
	params.newEulerVel[index] = pdata.eulerVel;
}

// A functor that helps to writes viscosity coefficient, if using KEPSVISC
template<ViscosityType visctype>
struct write_viscosity_coeff{
	template<typename EP, typename P>
	__device__ __forceinline__
	static void
	with(EP const& params, P &pdata, int index)
	{ /* do nothing*/ }
};


template<>
template<typename EP, typename P>
__device__ __forceinline__ void
write_viscosity_coeff<KEPSVISC>::with(EP const& params, P &pdata, int index)
{
	params.newTKE[index] = pdata.keps_k;
	params.newEps[index] = pdata.keps_e;
}

/* Euler kernel definitions */
// Predictor Corrector time integration
// - for step 1:
//	  v(n+1/2) = v(n) + f(n)*dt/2
//	  pos(n+1/2) = pos(n) + v(n)*dt/2
//
//	  We have oldVel = v(n), oldPos = pos(n), forces = f(n) so
//	  newVel = v(n+1/2) = oldVel + forces*dt/2
//	  newPos = pos(n+1/2) = oldPos + oldVel*dt/2
//
// - for step 2:
//	  vc(n+1/2) = v(n) + f(n+1/2)*dt/2
//	  posc(n+1/2) = pos(n) + vc(n+1/2)*dt/2
//	  then:
//	  v(n+1) = 2vc(n+1/2) - v(n) = v(n) + f(n+1/2)*dt
//	  pos(n+1) = 2posc(n+1/2) - pos(n) = pos(n) + vc(n+1/2)*dt
//
//	 Whe have oldVel = v(n), oldPos = pos(n), force = f(n+1/2),
//	  newVel = vel(n+1/2), newPos = pos(n+1/2) so
//	  we store velc = v(n) + f(n+1/2)*dt/2 then
//	  newPos = pos(n+1) = oldPos + velc*dt
//	  newVel = vel(n+1) = oldVel + forces*dt;

// Remember that for step 1 dt => dt/2 and for step 2 dt => dt !!!
// but dt2 is always equal to dt/2

/// Performs a basic Euler integration step
/*! Updates positions, velocities and other quantities of fluid partcles
 *  according to their previous values and derivatives :
 *  - for velocity \f$u(x, t + \Delta t) = u(x, t) + \Delta t.\frac{du}{dt}(x, t*)\f$
 *  - for positions \f$x(t + \Delta t) = x(t) + \Delta t.u_(x, t)\f$
 *	All other quantities are integrated like velocity.
 *
 *	The basic Euler step is called two times for the predictor corrector
 *	integration scheme (see tempalte param step) then \f$\Delta t\f$ and
 *	\f$t^*\f$ depends on the step.
 *
 *	The full description of the scheme is found in the IntegrationEngine
 *	documentation.
 *
 *	The velocities and positions of particles belonging to a floating or
 *	moving object are update according to a rigid body movement :
 *	- positions \f$x(t + \Delta t) = x(t) + t(t + \Delta t) + \Omega(t, t + \Delta t) \times (x(t) - x_C(t)\f$
 *	- velocity field  \f$u(x, t + \Delta  t) = v_l(t + \Delta t) + \frac{d\omega}{dt}(t + \Delta t)\times(x(t) - x_C(t)) \f$
 *	where :
 *	- \f$v_l\f$ is the linear velocity
 *	- \f$\frac{d\omega}{dt}\f$ the angular velocity
 *	- \f$t\f$ is the linear displacement
 *	- \f$\Omega(t, t + \Delta t)\f$ the rotation of the body between time
 *		\f$t\f$ an \f$t + \Delta t\f$
 *	- \f$C\f$ the center of rotation
 *
 *	\param[in] oldPos : previous particle's position
 *	\param[in] hashKey : particle's hash
 *	\param[in] oldVel : previous particle's velocity
 *	\param[in] oldEulerVel : previous eulerian velocities for ??? <- TODO
 *	\param[in] oldGam : previous values of gradient of gamma
 *	\param[in] okdTKE : previous values of k, for k-e model
 *	\param[in] oldEps : previous values of e, for k-e model
 *	\param[in] particleInfo : particle's information
 *	\param[in] forces : derivative of particle's velocity and density
 *	\param[in] contupd : ??? <- TODO
 *	\param[in] keps_dkde : derivative of ??? <- TODO
 *	\param[in] xsph : SPH mean of velocities used for xsph correction
 *	\param[out] newPos : updated particle's position
 *	\param[out] newVel : updated particle's  velocity
 *	\param[out] newEulerVel : updated eulerian velocities for ??? <- TODO
 *	\param[out] newgGam : updated values of gradient of gamma
 *	\param[out] newTKE : updated values of k, for k-e model
 *	\param[out] newEps : updated values of e, for k-e model
 *	\param[in,out] newBoundElement : ??? <- TODO
 *	\param[in] numParticles : total number of particles
 *	\param[in] full_dt  : time step (dt)
 *	\param[in] half_dt : half of time step (dt/2)
 *	\param[in] t : simualation time
 *
 *	\tparam step : integration step (1, 2)
 *	\tparam boundarytype : type of boundary
 *	\tparam kerneltype : type of kernel
 *	\tparam simflags : simulation flags
 */
//TODO templatize vars like other kernels
template<KernelType kerneltype, SPHFormulation sph_formulation, BoundaryType boundarytype, ViscosityType visctype, flag_t simflags>
__global__ void
eulerDevice(
	euler_params<kerneltype, sph_formulation, boundarytype, visctype, simflags> params)
{
	const int index = INTMUL(blockIdx.x,blockDim.x) + threadIdx.x;

	if (index >= params.numParticles)
		return;

	// We use dt/2 on the first step, the actual dt on the second step
	const float dt = (params.step == 1) ? params.half_dt : params.full_dt;

	euler_particle_data<kerneltype, sph_formulation, boundarytype, visctype, simflags> pdata(index, params);

	do {
		// Euler does nothing to boundary particles apart copying pos and vel
		// in the new arrays except :
		//		* when boundary part belongs to an object or a moving boundary, in
		//		  that case particle position and velocity is updated according to
		//		  the rigid body movement
		//		* with dynamic boundaries, in that case density of boundary parts is
		//		  also evolved
		//		* with SA boundaries and .....
		// TODO: complete previous comment
		const bool integrateBoundary = (boundarytype == DYN_BOUNDARY || boundarytype == SA_BOUNDARY);
		// TODO: fix for MOBILE and FLOATING boundaries with any type of bound type
		if (!ACTIVE(pdata.pos) || (pdata.ptype == PT_BOUNDARY && !integrateBoundary && !MOVING(pdata.info)) )
			break;

		// velc = vel if step == 1, but
		// velc = vel + forces[index]*dt/2.0f if step == 2
		// in the XSPH case we also add the mean velocity (pdata.xsph)
		compute_corrected_velocity<simflags & ENABLE_XSPH>::with(params, pdata);

		// Object index
		const int obj = object(pdata.info);

		// Updating particle position
		switch (pdata.ptype) {
			case PT_FLUID:
				// Add weighted mean_vel only in xsphcorr case.
				// The compiler is smart enough to optimize it out
				// in the xsphcorr == false case
				pdata.pos.x += pdata.velc.x*dt;
				pdata.pos.y += pdata.velc.y*dt;
				pdata.pos.z += pdata.velc.z*dt;

				// Grenier evolves the volume, not the density,
				// all other evolve the density directly.
				continuity_integration<
					boundarytype == SA_BOUNDARY ? INTEGRATE_SA :
					(sph_formulation == SPH_GRENIER ? INTEGRATE_VOLUME :
					INTEGRATE_DENSITY)
				>::with(params, pdata, index, dt);

				as_float3(pdata.vel) += dt*as_float3(pdata.force);

				// Updating k and e for k-e model
				k_e_integration<visctype == KEPSVISC>::with(params, pdata, index, dt);

				break;

		/* BOUNDARY and VERTEX particles behave essentially in the same way, so they are
		   handled in the same switch case (VERTEX particles are only preset in SA_BOUNDARY
		   case)
		 */
		case PT_BOUNDARY:
		case PT_VERTEX:

			// integration pos and vel for moving objects
			if (MOVING(pdata.info)) {
				#ifdef _DEBUG_OBJ_FORCES_
				if (id(pinfo) == 0 && obj == 1 && d_rblinearvel[obj].x != 0.0) {
					printf("Euler device, object %d\n", obj);
					printf("   lvel: %e\t%e\t%e\n", d_rblinearvel[obj].x, d_rblinearvel[obj].y, d_rblinearvel[obj].z);
					printf("   avel: %e\t%e\t%e\n", d_rbangularvel[obj].x, d_rbangularvel[obj].y, d_rbangularvel[obj].z);
					printf("   gpos: %d\t%d\t%d\n", d_rbcgGridPos[obj].x, d_rbcgGridPos[obj].y, d_rbcgGridPos[obj].z);
					printf("   lpos: %e\t%e\t%e\n", d_rbcgPos[obj].x, d_rbcgPos[obj].y, d_rbcgPos[obj].z);
					printf("   trans:%e\t%e\t%e\n", d_rbtrans[obj].x, d_rbtrans[obj].y, d_rbtrans[obj].z);
					printf("   SR:   %e\t%e\t%e\n", d_rbsteprot[9*obj + 0], d_rbsteprot[9*obj + 1], d_rbsteprot[9*obj + 2]);
					printf("         %e\t%e\t%e\n", d_rbsteprot[9*obj + 3], d_rbsteprot[9*obj + 4], d_rbsteprot[9*obj + 5]);
					printf("         %e\t%e\t%e\n", d_rbsteprot[9*obj + 6], d_rbsteprot[9*obj + 7], d_rbsteprot[9*obj + 8]);
				}
				#endif

				// Applying rotation around center of gravity. We always have cg = cg(n). Cg behaves
				// the same as pos and we always have pos = pos(n).
				// relPos = x - x_cg
				const int3 gridPos = calcGridPosFromParticleHash(params.particleHash[index]);
				const float3 relPos = globalDistance(gridPos, as_float3(pdata.pos),
						d_rbcgGridPos[obj], d_rbcgPos[obj]);
				applyrot(&d_rbsteprot[9*obj], relPos, pdata.pos);

				// Applying center of gravity translation
				pdata.pos.x += d_rbtrans[obj].x;
				pdata.pos.y += d_rbtrans[obj].y;
				pdata.pos.z += d_rbtrans[obj].z;

				// Computing particles velocity
				// V(P) = V(Cg) + PCg^omega
				as_float3(pdata.vel) = d_rblinearvel[obj] + cross(d_rbangularvel[obj], relPos);

				// update normal of boundary element, if using SA_BOUNDARY
				update_normals_SA<boundarytype>::with(params, pdata, index);
			}

			// DYN_BOUNDARY: integrate density
			if (boundarytype == DYN_BOUNDARY) {
				continuity_integration<
					sph_formulation == SPH_GRENIER ? INTEGRATE_VOLUME :
					INTEGRATE_DENSITY
				>::with(params, pdata, index, dt);
			}

			// SA_BOUNDARY: integrate Eulerian velocity for k-eps
			integrate_eulerian_velocity_ke<boundarytype, visctype>::with(params, pdata, dt);

			break;

		case PT_TESTPOINT:
			/* TODO */
			break;
		}
	} while (0);

	params.newPos[index] = pdata.pos;
	params.newVel[index] = pdata.vel;
	write_volume<sph_formulation>::with(params, pdata, index);
	write_velocity<boundarytype, visctype>::with(params, pdata, index);
	write_viscosity_coeff<visctype>::with(params, pdata, index);
	write_gamma_of_boundary<boundarytype>::with(params, pdata);
}

/* vi:set ft=cuda: */
